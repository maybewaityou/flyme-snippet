{
  "Print to console": {
    "prefix": "asdasd",
    "body": "print('== $1 ===>>>> $$2');",
    "description": "Log output to console"
  },
  "Print to console with params": {
    "prefix": "asddsa",
    "body": "print('== $1 ===>>>> ${$2}');",
    "description": "Log output to console"
  },
  "Debug print to console": {
    "prefix": "dsadsa",
    "body": "debugPrint('== $1 ===>>>> $$2');",
    "description": "Log output to console"
  },
  "Debug print to console with params": {
    "prefix": "dsaasd",
    "body": "debugPrint('== $1 ===>>>> ${$2}');",
    "description": "Log output to console"
  },
  "Snapshot": {
    "prefix": "sna",
    "body": "snapshot",
    "description": "Snapshot"
  },
  "Insert an if statement": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "\t$2",
      "}"
    ],
    "description": "Insert an if statement"
  },
  "Insert an if statement with else block": {
    "prefix": "ife",
    "body": [
      "if ($1) {",
      "\t$2",
      "} else {",
      "\t$3",
      "}"
    ],
    "description": "Insert an if statement with else block"
  },
  "Stateless Widget": {
    "prefix": "sl",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "\tfinal Widget ${2:child};\n",
      "\t${1:name}({Key key, this.${2:child}}) : super(key: key);\n",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn Container(",
      "\t\t\tchild: ${2:child},",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "sf",
    "body": [
      "class ${1:name} extends StatefulWidget {",
      "\tfinal Widget ${2:child};\n",
      "\t${1:name}({Key key, this.${2:child}}) : super(key: key);\n",
      "\t_${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:index}State extends State<${1:index}> {",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn Container(",
      "\t\t\tchild: widget.${2:child},",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "bld",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "\treturn ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter": {
    "prefix": "cp",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "\t@override",
      "\tvoid paint(Canvas canvas, Size size) {",
      "\t}",
      "",
      "\t@override",
      "\tbool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "\t@override",
      "\tbool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper": {
    "prefix": "cc",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "\t@override",
      "\tPath getClip(Size size) {",
      "\t}",
      "",
      "\t@override",
      "\tbool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState": {
    "prefix": "init",
    "body": ["void initState() {", "\tsuper.initState();", "\t${0:}", "}"],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() {",
      "\t${0:}",
      "\tsuper.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Reassemble": {
    "prefix": "rasm",
    "body": [
      "@override",
      "void reassemble() {",
      "\tsuper.reassemble();",
      "\t${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "didChangeDependencies": {
    "prefix": "dcd",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "\tsuper.didChangeDependencies();",
      "\t${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "duw",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "\tsuper.didUpdateWidget(${2:oldWidget});",
      "\t${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "lsb",
    "body": [
      "ListView.builder(",
      "\titemCount: ${1:1},",
      "\titemBuilder: (BuildContext context, int index) {",
      "\treturn ${2:};",
      " },",
      "),"
    ],
    "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
  },
  "Custom Scroll View": {
    "prefix": "csv",
    "body": [
      "CustomScrollView(",
      "\tslivers: <Widget>[",
      "\t\t${0:}",
      "\t],",
      "),"
    ],
    "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
  },
  "Stream Builder": {
    "prefix": "stb",
    "body": [
      "StreamBuilder(",
      "\tstream: ${1:stream},",
      "\tinitialData: ${2:initialData},",
      "\tbuilder: (BuildContext context, AsyncSnapshot<$3> snapshot) {",
      "\t\treturn Container(",
      "\t\t\tchild: ${4:child},",
      "\t\t);",
      "\t},",
      "),"
    ],
    "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
  },
  "Animated Builder": {
    "prefix": "abldr",
    "body": [
      "AnimatedBuilder(",
      "\tanimation: ${1:animation},",
      "\tchild: ${2:child},",
      "\tbuilder: (BuildContext context, Widget child) {",
      "\t\treturn ${3:};",
      "\t},",
      "),"
    ],
    "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
  },
  "Stateful Builder": {
    "prefix": "stflbldr",
    "body": [
      "StatefulBuilder(",
      "\tbuilder: (BuildContext context, setState) {",
      "\t\treturn ${0:};",
      "\t},",
      "),"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Oriantation Builder": {
    "prefix": "oribldr",
    "body": [
      "OrientationBuilder(",
      "\tbuilder: (BuildContext context, Orientation orientation) {",
      "\t\treturn Container(",
      "\t\t\tchild: ${3:child},",
      "\t\t);",
      "\t},",
      "),"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder": {
    "prefix": "laybldr",
    "body": [
      "LayoutBuilder(",
      "\tbuilder: (BuildContext context, BoxConstraints constraints) {",
      "\t\treturn ${0:};",
      "\t},",
      "),"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Single Child ScrollView": {
    "prefix": "scsv",
    "body": [
      "SingleChildScrollView(",
      "\tcontroller: ${1:controller,}",
      "\tchild: Column(",
      "\t\t${0:}",
      "\t),",
      " }",
      "),"
    ],
    "description": "Creates a scroll view with a single child"
  },
  "Future Builder": {
    "prefix": "ftbldr",
    "body": [
      "FutureBuilder(",
      "\tfuture: ${1:Future},",
      "\tinitialData: ${2:initialData},",
      "\tbuilder: (BuildContext context, AsyncSnapshot<$3> snapshot) {",
      "\t\treturn ${4:child};",
      "\t},",
      "),"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "\t${1:}",
      "}"
    ],
    "description": "This method is invoked when a non-existent method or property is accessed."
  },
  "Inherited Widget": {
    "prefix": "inhwdgt",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "\t${1:Name}({Key key, this.child}) : super(key: key, child: child);",
      "",
      "\tfinal Widget child;",
      "",
      "\tstatic ${1:Name} of(BuildContext context) {",
      "\t\treturn (context.inheritFromWidgetOfExactType(${1:Name})as ${1:Name});",
      "\t}",
      "",
      "\t@override",
      "\tbool updateShouldNotify( ${1:Name} oldWidget) {",
      "\t\treturn ${2:true};",
      "\t}",
      "}"
    ],
    "description": "Class used to propagate information down the widget tree"
  },
  "Mounted": {
    "prefix": "mntd",
    "body": ["@override", "bool get mounted {", "\t${0:}", "}"],
    "description": "Whether this State object is currently in a tree."
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A Sink is the input of a stream."
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Generate Sink and Stream with RxDart": {
    "prefix": "gss",
    "body": [
      "final _${2:name}Controller = BehaviorSubject<${1:type}>();",
      "Sink<${1:type}> get _${2:name}Sink => _${2:name}Controller.sink;",
      "Observable<${1:type}> get ${2:name} => _${2:name}Controller.stream;"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Import Empty Package": {
    "prefix": "mi",
    "body": "import '$0';",
    "description": "Import empty package"
  },
  "Import Package": {
    "prefix": "mip",
    "body": "import 'package$0';",
    "description": "Import package"
  },
  "Import Dart Package": {
    "prefix": "mid",
    "body": "import 'dart$0';",
    "description": "Import dart package"
  },
  "Material Package": {
    "prefix": "mipm",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "RxDart Package": {
    "prefix": "mirx",
    "body": "import 'package:rxdart/rxdart.dart';",
    "description": "Import rxdart package"
  },
  "Dart Async Module": {
    "prefix": "mida",
    "body": "import 'dart:async';",
    "description": "Import dart async module"
  },
  "Dart IO Module": {
    "prefix": "midi",
    "body": "import 'dart:io';",
    "description": "Import dart io module"
  },
  "Dart Convert Module": {
    "prefix": "midc",
    "body": "import 'dart:convert';",
    "description": "Import dart convert module"
  }
}
